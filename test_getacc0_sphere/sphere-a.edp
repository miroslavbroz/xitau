// triangulation_adapt.edp
// Triangulation of a sphere with an adaption.
// adapted from the FreeFem++ documentation

// initial square mesh $]\frac{-pi}{2},frac{-pi}{2}[\times]0,2\pi[ $
//mesh Th=square(10,20,[x*pi-pi/2,2*y*pi]);
//mesh Th=square(100,200,[x*pi-pi/2,2*y*pi]);
mesh Th=square(50,100,[x*pi-pi/2,2*y*pi]);

// a parametrization of a sphere 
func f1 =cos(x)*cos(y);
func f2 =cos(x)*sin(y);
func f3 = sin(x);

// partial deivatives of the parametrization $DF$
func f1x=sin(x)*cos(y);   
func f1y=-cos(x)*sin(y);
func f2x=-sin(x)*sin(y);
func f2y=cos(x)*cos(y);
func f3x=cos(x);
func f3y=0;

// metric on the sphere $M = DF^t DF$
func m11=f1x^2+f2x^2+f3x^2;
func m21=f1x*f1y+f2x*f2y+f3x*f3y;
func m22=f1y^2+f2y^2+f3y^2;

func perio=[[4,y],[2,y],[1,x],[3,x]]; // to store the periodic condition 

// the intial spherical mesh
//savemesh(Th,"sphere",[f1,f2,f3]);
plot(Th,wait=1);

// perform an adaption
real hh = 0.1;
real vv = 1/square(hh);
verbosity = 2;

Th = adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,inquire=1,periodic=perio);
plot(Th,wait=1);

for (int i=1; i<=5; i++) {
  Th = adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
  plot(Th,wait=1);
}

// save the resulting adapted mesh
savemesh(Th,"sphere-a",[f1,f2,f3]);
//exec("ffmedit sphere-a");


