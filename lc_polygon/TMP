
!hatu = (/sin(l), -cos(l), 0.d0/)  ! old vers. from chi2_func_AO.f90, incorrect front<->back
!hatu = (/-sin(l), cos(l), 0.d0/)  ! new vers, correct front<->back
!hatu = (/sin(l), -cos(l), 0.d0/)  ! this does NOT switch area sign!

! perpendicular, left-handed?!
!hatv = vector_product(hatu, hatw)  ! orig. vers.
!hatv = -vector_product(hatu, hatw)  ! this does NOT switch area sign!

! switched u <-> v, right-handed
!hatv = (/-sin(l), cos(l), 0.d0/)
!hatu = vector_product(hatv, hatw)
! Note: If there is no clip, it is necessary to revert the polygon!
! Otherwise, a non-clipped polygon (polys4->polys5) has an incorrect
! orientation, if it was clipped previously (polys2->polys3).

! Note: revert() is no longer needed, for right-handed (u, v, w)?!
!  if ((c.eq.0).and.(clips(i).lt.1000)) then
!  if (c.eq.0) then
!    call revert(poly_i)
!    c = c+1000
!  endif

!    surf(i) = surf(i) + sign(tmp2,tmp3)  ! old vers., left-handed (u, v, w)
    surf(i) = surf(i) - sign(tmp2,tmp3)  ! new vers., right-handed (u, v, w), revert in clip_in_c()

    if (i.eq.219) then
!      write(*,*) 'i = ', i
!      write(*,*) 'tmp = ', tmp
!      write(*,*) 'tmp2 = ', tmp2
      write(*,*) 'tmp3 = ', tmp3
!      write(*,*) 'normals = ', normals(i,:)
    endif


! A TEST TRANSFORMATION:
!capS = surface(polys1, normals, surf)
!
!no = no+1
!write(str,'(i0.2)') no
!call write_poly("output.poly1." // trim(str), polys1)
!call write1("output.surf1." // trim(str), surf)

!!s_ = (/0.d0, 0.d0, 1.d0/)
!call uvw(s, polys1, polys2)
!call uvw_(normals)
!capS = surface(polys2, normals, surf)
!
!call write_poly("output.poly2." // trim(str), polys2)
!call write1("output.surf2." // trim(str), surf)
!
!call xyz(polys2, polystmp)
!call xyz_(normals)
!capS = surface(polystmp, normals, surf)
!
!call write_poly("output.polytmp." // trim(str), polystmp)
!call write1("output.surftmp." // trim(str), surf)
!stop

if (debug_polygon) then
  no = no+1
  if ((no.eq.1).or.(no.eq.49).or.(no.eq.50)) then
    write(str,'(i0.2)') no
    call write1("output.clip1." // trim(str), dble(clips))
  endif
  no = no-1
endif

!capS = surface(polys2, normals, surf)
!call write1("output.surf2." // trim(str), surf)

!capS = surface(polys3, normals, surf)
!call write1("output.surf3." // trim(str), surf)

!call uvw(o_, polys3, polys4, equatorial=.true.)  ! old vers.

!capS = surface(polys4, normals, surf)
!call write1("output.surf4." // trim(str), surf)

!call write1("output.surf5." // trim(str), surf)

! revert?
!do i = 1, size(polys5,1)
!  if (clips(i).eq.0) then
!    call revert(polys5(i))
!  endif
!enddo

! old basis (not '), in old coordinates
!hatx = (/1.d0, 0.d0, 0.d0/)
!haty = (/0.d0, 1.d0, 0.d0/)
!hatz = (/0.d0, 0.d0, 1.d0/)

stop

double precision function E1(x)
implicit none
double precision, intent(in) :: x
E1 = exp(-2.d0/(pi*tanbartheta*tan(x)))
return
end function E1


double precision function E2(x)
implicit none
double precision, intent(in) :: x
E2 = exp(-1.d0/(pi*tanbartheta**2*(tan(x))**2))
return
end function E2
!cosalpha = cosi*cose + sini*sine*cospsi

! see also ../test_polygon25_tinytriangle/test_tinytriangle

!write(*,*) 'phi1 = ', phi1(1)/deg
!write(*,*) 'phi2 = ', phi2(1)/deg
!write(*,*) 'phi3 = ', phi3(1)/deg

    if (i.eq.1) then
      facesall = faces1
      nodesall = nodes1
      dataset = [size(nodesall,1)]
    else
      facesall(:,1) = [facesall(:,1), faces1(:,1)]
      write(*,*) 'facesall = ', facesall
      facesall(:,2) = [facesall(:,2), faces1(:,2)]
      facesall(:,3) = [facesall(:,3), faces1(:,3)]
      nodesall(:,1) = [nodesall(:,1), nodes1(:,1)]
      nodesall(:,2) = [nodesall(:,2), nodes1(:,2)]
      nodesall(:,3) = [nodesall(:,3), nodes1(:,3)]
      dataset = [dataset, size(nodesall,1)]
    endif

  enddo
integer, save :: idebug = 0

!Phi_lambda_cal = Phi_nu_cal*clight/lambda_eff**2

! i.e., faster than poly_2 = poly_1
subroutine c1(poly_2, poly_1)
use polytype_module
implicit none
type(polystype), intent(out) :: poly_2
type(polystype), intent(in) :: poly_1
integer :: j, k
poly_2%c = poly_1%c
do j = 1, poly_1%c
  k = poly_1%s(j)%c
  poly_2%s(j)%c = k
  poly_2%s(j)%p(1:k,:) = poly_1%s(j)%p(1:k,:)
enddo
end subroutine c1

double precision, dimension(3) :: hatx, haty, hatz

! old basis
hatx = (/hatu(1), hatv(1), hatw(1)/)
haty = (/hatu(2), hatv(2), hatw(2)/)
hatz = (/hatu(3), hatv(3), hatw(3)/)

      write(*,*) 'i = ', i, ' j = ', j, ' poly_k%c = ', poly_k%c

  src/uvw.o \
  src/clip.o \
!do i = 1, size(polys2,1)
!  counts = notnan(polys2(i,:,:))
!enddo

integer function notnan(poly)
use nan_module
implicit none
double precision, dimension(:,:) :: poly
integer :: i
i = 1
do while (poly(i,1).ne.NAN) i = i+1
notnan = i
return
end function notnan

use ieee_arithmetic, only: ieee_value, ieee_quiet_nan

use ieee_arithmetic, only: ieee_is_nan

t1 = ieee_value(1.0, ieee_signaling_nan)
t2 = 1.0
write(*,*) t1
write(*,*) isnan(t1)
write(*,*) .not.isnan(t1)
write(*,*) ieee_is_nan(t1)
write(*,*) .not.ieee_is_nan(t1)
write(*,*) t2
write(*,*) isnan(t2)
write(*,*) .not.isnan(t2)
write(*,*) ieee_is_nan(t2)
write(*,*) .not.ieee_is_nan(t2)
stop

polys = ieee_value(1.d0, ieee_quiet_nan)



