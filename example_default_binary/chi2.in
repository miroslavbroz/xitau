# chi2.in
# nparam number of paramters
# x() vector:
#
#  mtot q1=m2/m1 q2=m3/(m1+m2)
#  P1 loge1 i1 Omega1 omega1 M1
#  P2 loge2 i2 Omega2 omega2 M2
#  T1 T2 T3
#  Rstar1 Rstar2 Rstar3
#  Prot1 Prot2 Prot3
#  metal1 metal2 metal3
#  Deltat1 Deltat2 Deltat3
#  C201 C202 C203
#  polel1 polel2 polel3
#  poleb1 poleb2 poleb3
#  phi01 phi02 phi03
#  albedo1 albedo2 albedo3
#  B0 minh ming bartheta
#  alpha beta
#  gamma
#  d_pc
#  ...
#
36

   2.0                       1.0
   1.0                       -10.0                       90.0                      0.0                       0.0                       0.0
       6000.0                    6000.0
       1.0                       1.0
       1.0                       1.0
        0.0000000000000000        0.0000000000000000
        0.0000000000000000        0.0000000000000000
        0.0000000000000000        0.0000000000000000
        0.0000000000000000        0.0000000000000000
        90.000000000000000        90.000000000000000
        0.0000000000000000        0.0000000000000000
       0.40000000000000000       0.40000000000000002        1.7339264964538275        2.9501425956512659E-002  -1.9708597556396493E-002   0.0000000000000000
       0.66000000000000003        3.0000000000000000
        0.0
        100.0

2459546.69210264	! fixed (dependent) parameters: T0 [JD]; 1st Trappist LC point

0			! nshp number of shape parameters

2			! nbod number of bodies; a list of 2*nbod+4 files with observational data (or '-' if no data)...
-Sky1.dat
-Sky2_photocentre_wo52270.dat
-RV1.dat
-RV2.dat
-Omc12.dat
-Ecl12.dat
-Vis.dat
-Clo.dat
-Spectra.dat
-1.syn
-2.syn
-Sed.dat
-1.abs
-2.abs
-AO1.dat
-AO2.dat
-Sky_differential.dat
-Sky_angularvelocity.dat
-Occ.dat

0			! nband number of photometric bands; a list of bands and lightcurve files; 7 .. Johnson V, 15 .. Rc

4                       ! geometry of the system: 0 ... hierarchical ((1+2)+3)+4, 1 ... two pairs ((1+2)+(3+4))+5, 4 ... hierarchical w. true longitude

0.0 0.0			! m_min(nbod) [M_S] minimum masses
10.0 10.0		! m_max(nbod) [M_S] maximum masses
F F			! use_hec88(nbod) use Harmanec (1988) to constrain components (i.e. use only T_eff as a parameter!)

0.001			! lightcurve_timestep [day] timestep of synthetic lightcurve; set to 0.0 if all observed points should be computed
0.100			! approx_eclipse_duration [day] approximate eclipse duration for eclipse detection
399.e-9 675.e-9		! lambda1 lambda2 [metres] wavelength range for rectified synthetic spectra
321.e-9 998.e-9		! lambda3 lambda4 [metres] range for absolute spectra (to fit SED)
10.0 0.001 0.1 0.0001   ! pyterpol_Delta's for T_eff [K], log_g [cgs], v_rot [km/s], metal [1]

0.4			! silh_factor [] signal = factor*max(signal) to compute a silhouette
0.45			! spectral_slope [1] reflectance = 1.0 + slope*(lambda_eff/mu-0.55) to compute LC
0			! nsub number of sub-divisions

T			! use_planck [T|F] use Planck approximation; otherwise use absolute synthetic spectra (*.abs files)
F			! use_filters [T|F] use filter transmissions to compute SED; otherwise use effective wavelengths and bandpasses
F			! use_limbdark [T|F] use linear limb-darkening coefficients for visibility |V|^2 calculation
F			! use_pyterpol [T|F] use Pyterpol (Nemravova et al. 2016) to generate synthetic spectra on-the-fly
F			! use_vardist [T|F] use variable distance/geometry (in solar system)
F			! use_varpole [T|F] use variable pole of body 1 (in solar system)
F			! use_multipole [T|F] use multipole expansion of body 1
F			! use_bruteforce [T|F] use shape of body 1 and brute-force algorithm
F                       ! use_oblat [T|F] use oblateness (Fabrycky 2010)
F                       ! use_tides [T|F] use tides (Mignard 1979)
F                       ! use_tides2 [T|F] use external tides
F                       ! use_ppn [T|F] use parametrized post-Newtonian approximation
T                       ! use_polygon [T|F] use lc_polygon to compute the lightcurve (instead of wd)
T                       ! use_zero [T|F] use analytical zero-point(s) to the lightcurve(s)
T			! use_adam [T|F] use adam-like synthetic images, u. lc_polygon
F			! use_stellar [T|F] use stellar.pnm as PSF; otherwise use Moffat
T			! use_cliptrace [T|F] use cliptrace instead of raytrace

1.0 1.0 1.0 1.0  1.0 1.0 1.0  1.0 1.0 1.0  0.003 0.0 1.0 1.0 0.0	! w_SKY w_RV w_TTV w_ECL w_VIS w_CLO w_T3 w_LC w_SYN w_SED w_AO w_AO2 w_SKY2 w_SKY3 w_OCC weights for chi^2 computation
1.e-8			! eps_BS for Bulirsch-Stoer integrator
T			! debugging output?
T			! debug integrator?


