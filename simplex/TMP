
c            write(*,*) "u = ", lambda, u, k  ! dbg

          if (debug) then
            write(*,*) "# poth = ", poth
            write(*,*) "# potc = ", potc
          endif

          write(*,*) "dist = ", dist, " AU"
          r1 = R_star(1)*R_S/(dist*AU)
          r2 = 1.d0-r1
          r3 = r1
          poth = omega_kopal(r1, r2, r3, rm)
          write(*,*) "poth = ", poth, " (OLD)"

          r1 = R_star(1)*R_S/(dist*AU)
          r2 = 1.d0-r1
          r3 = r1-rm/(1.d0+rm)
          poth = omega_kopal(r1, r2, r3, rm)
          write(*,*) "poth = ", poth, " (NEW)"

          r2 = R_star(2)*R_S/(dist*AU)
          r1 = 1.d0-r2
          r3 = r1
          potc = omega_kopal(r1, r2, r3, rm)
          write(*,*) "potc = ", potc, " (OLD)"

          r2 = R_star(2)*R_S/(dist*AU)
          r1 = 1.d0-r2
          r3 = r1-rm/(1.d0+rm)
          potc = omega_kopal(r1, r2, r3, rm)
          write(*,*) "potc = ", potc, " (NEW)"
          
c Prsa (2011), phoebe-science.pdf, Eq. (3.16)

c              Int_interp = interp(lambda_synth(l-1,k),
c     :          lambda_synth(l,k), Int_synth(l-1,k), Int_synth(l,k),
c     :          lambda_interp)

              write(*,*) "i = ", i
              write(*,*) "k = ", k
              write(*,*) "lambda_interp = ", lambda_interp, " m"
              write(*,*) "lambda_synth(1,", k, ") = ", lambda_synth(1,k)
              write(*,*) "Int_synth(1,", k, ") = ", Int_synth(1,k)
              write(*,*) "n_synth(", k, ") = ", n_synth(k)
              write(*,*) "Int_interp = ", Int_interp

           
c   http://www.aip.de/en/research/facilities/stella/instruments/data/johnson-ubvri-filter-curves

        write(*,*) "t = ", t, " j = ", j

          write(*,*) "t_of_interest(", j, ") = ", t_of_interest(j)
          write(*,*) "dttmp = ", dttmp
          write(*,*) "dtnext = ", dtnext
          write(*,*) ""

        write(*,*) "LITE = ", LITE, " day = ", LITE*1440., " min, ",
     :    "LITE12 = ", LITE12, " day = ", LITE12*1440., " min"

        write(*,*) '# lambda = ', lambda/1.d-9, ' nm'
        do k = 1, nbod
          write(*,*) '# Lum_lambda(', k, ') = ', Lum_lambda(k)/Lumtot
        enddo
            write(*,*) 'phi(', k, ') = ', phi, ' rad = ',
     :        phi/pi*180.d0*3600.d0*1d3, ' mas'

      do k = 2, 4
        write(*,*) 'a(', k, ') = ', elmts(k,1), ' AU = ',
     :    elmts(k,1)/(d_pc*pc/AU)/mas, ' mas'
      enddo
      stop


c        tmp = rj(i,1)
c        rj(i,1) = rj(i,2)
c        rj(i,2) = -tmp
c        rj(i,3) = -rj(i,3)
c        tmp = vj(i,1)
c        vj(i,1) = vj(i,2)
c        vj(i,2) = -tmp
c        vj(i,3) = -vj(i,3)
c
c        call orbel_xv2el(
c     :    rj(i,1),rj(i,2),rj(i,3),
c     :    vj(i,1),vj(i,2),vj(i,3),
c     :    msum,ialpha,
c     :    elmts(i,1),elmts(i,2),elmts(i,3),
c     :    elmts(i,4),elmts(i,5),elmts(i,6))
c
c        write(*,*) elmts(i,1), elmts(i,2), elmts(i,3)*rad,
c     :    elmts(i,4)*rad, elmts(i,5)*rad, elmts(i,6)*rad
      write(*,*) "# jacobian"
      do i = 1, nbod
        write(*,*) m(i),(rj(i,k), k=1,3), (vj(i,k), k=1,3)
      enddo

c        write(*,*) A(1), A(2), B(1), B(2), C_(1), C_(2)
c        write(*,*) 'tout(i) = ', tout(i)
c        write(*,*) 'tout(i+1) = ', tout(i+1)
c        write(*,*) 't_ = ', t_
c        write(*,*) 'extra = ', extra

