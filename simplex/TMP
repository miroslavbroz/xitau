c
c osculating semimajor axis (for absolute scale)
c          
          call orbel_xv2el(X(1), X(2), X(3), V(1), V(2), V(3),
     :      m(1)+m(2), ialpha, a, e, inc, capom, omega, capm)
          sema = a*au/R_S
          write(*,*) 'a    = ', a*au/R_S, ' R_S'
          write(*,*) 'dist = ', dist*au/R_S, ' R_S'

          poth = omega_kopal_approx(R_star(1)*R_S/(dist*AU), rm, 0.d0)
          potc = omega_kopal_approx(R_star(2)*R_S/(dist*AU), rm, 1.d0)

      write(*,*) 'a = ', a*au/R_S, ' R_S'  ! dbg

      do k = 1, 3
        msum = 0.d0
        r_barycentre(k) = 0.d0
        v_barycentre(k) = 0.d0
        do i = 1, nbod
           msum = msum + m(i)
           r_barycentre(k) = r_barycentre(k) + r(i,k)*m(i)
           v_barycentre(k) = v_barycentre(k) + v(i,k)*m(i)
        enddo
        r_barycentre(k) = r_barycentre(k)/msum
        v_barycentre(k) = v_barycentre(k)/msum
      enddo

      if (debug_swift) then
        write(*,*) "# barycentre coordinates:"
        write(*,*) (r_barycentre(k), k=1,3), (v_barycentre(k), k=1,3)
      endif

        if (t.ge.tout_-eps) then
          dttmp = t_of_interest(min(j+1,n_of_interest))-t
          if (dttmp.gt.0.d0) then
            tout_ = tout_ + min(dtout, dttmp)
          else
            tout_ = tout_ + dtout
          endif
        endif


!          call io_dump_spin('dump_spin.dat',nbod)

!      do i = 1, nbod
!        R_body(i) = R_star(i)*R_S/AU
!        R_body5(i) = R_body(i)**5
!      enddo


!        c_ = 5.d0*pixel_scale(i)  ! dbg
 
!        do j = 1, size(silh_OBS,1)
!          silh_OBS(j,:) = silh_OBS(j,:) - c_
!        enddo
!        c_ = center_silh(silh_OBS) - center_silh(silh)
 
 = ', c_/pixel_scale(i),
     :      ' pxl'

          write(*,*) 'elmts(', i, ',3)_ = ', elmts(i,3)
          write(*,*) 'elmts(', i, ',4)_ = ', elmts(i,4) 
      else
        do i = 2, nbod
          write(*,*) 'elmts(', i, ',3) = ', elmts(i,3)
          write(*,*) 'elmts(', i, ',4) = ', elmts(i,4) 
        enddo

!        phi2 = pi_/2.d0-pole_b
!        phi3 = pi_/2.d0+pole_l
!        call rot_x_nodes(nodes_, phi2)
!        call rot_z_nodes(nodes_, phi3)

!        write(*,*) 't_AO(', i, ') = ', t_AO(i)
!        write(*,*) 'Tmin = ', Tmin
!        write(*,*) 'P = ', P
!        write(*,*) 'phi1 = ', phi1/deg, ' deg'
!        write(*,*) 'phase = ', phase

            write(*,*) 'x, y, z = ', xh_interp, yh_interp, zh_interp,
     :        ' u, v, w = ', u, v, w  ! dbg

            call uvw(ecl(i,j), ecb(i,j), u, v, w)

c synthetic spectra
      integer n_absol(NBODMAX)
      real*8 lambda_absol(OBSMAX,NBODMAX), flux_absol(OBSMAX,NBODMAX)

     :  n_absol, lambda_absol, flux_absol

      logical percent
      data percent /.false./

            if (Int_lambda(i) > 1.d0+eps) percent = .true.

c check per-cents
      if (percent) then
        do i = 1, N
          Int_lambda(i) = Int_lambda(i)*0.01d0  ! % -> []
        enddo
      endif

      parameter(L0 = 3.055d28)      ! W
      parameter(Mbol0 = 0.d0)       ! mag
        write(*,*) '# P = ', P, ' day'
        write(*,*) '# n = ', n, ' rad/day'
        write(*,*) '# a = ', a, ' au'
        write(*,*) '# a = ', a*au/(306.d0*pc)/mas, ' mas'

c a^3/P^2 = GM/(4pi^2)
c a^3 n^2 = GM
        write(*,*) '# P = ', P, ' day'
        write(*,*) '# a = ', a, ' au'
        write(*,*) '# a = ', a*au/(303*pc)/mas, ' mas'

      real*8 Delta_T_eff, Delta_log_g, Delta_v_rot
     :  Delta_T_eff, Delta_log_g, Delta_v_rot,

c            write(*,*) "u = ", lambda, u, k  ! dbg

          if (debug) then
            write(*,*) "# poth = ", poth
            write(*,*) "# potc = ", potc
          endif

          write(*,*) "dist = ", dist, " AU"
          r1 = R_star(1)*R_S/(dist*AU)
          r2 = 1.d0-r1
          r3 = r1
          poth = omega_kopal(r1, r2, r3, rm)
          write(*,*) "poth = ", poth, " (OLD)"

          r1 = R_star(1)*R_S/(dist*AU)
          r2 = 1.d0-r1
          r3 = r1-rm/(1.d0+rm)
          poth = omega_kopal(r1, r2, r3, rm)
          write(*,*) "poth = ", poth, " (NEW)"

          r2 = R_star(2)*R_S/(dist*AU)
          r1 = 1.d0-r2
          r3 = r1
          potc = omega_kopal(r1, r2, r3, rm)
          write(*,*) "potc = ", potc, " (OLD)"

          r2 = R_star(2)*R_S/(dist*AU)
          r1 = 1.d0-r2
          r3 = r1-rm/(1.d0+rm)
          potc = omega_kopal(r1, r2, r3, rm)
          write(*,*) "potc = ", potc, " (NEW)"
          
c Prsa (2011), phoebe-science.pdf, Eq. (3.16)

c              Int_interp = interp(lambda_synth(l-1,k),
c     :          lambda_synth(l,k), Int_synth(l-1,k), Int_synth(l,k),
c     :          lambda_interp)

              write(*,*) "i = ", i
              write(*,*) "k = ", k
              write(*,*) "lambda_interp = ", lambda_interp, " m"
              write(*,*) "lambda_synth(1,", k, ") = ", lambda_synth(1,k)
              write(*,*) "Int_synth(1,", k, ") = ", Int_synth(1,k)
              write(*,*) "n_synth(", k, ") = ", n_synth(k)
              write(*,*) "Int_interp = ", Int_interp

           
c   http://www.aip.de/en/research/facilities/stella/instruments/data/johnson-ubvri-filter-curves

        write(*,*) "t = ", t, " j = ", j

          write(*,*) "t_of_interest(", j, ") = ", t_of_interest(j)
          write(*,*) "dttmp = ", dttmp
          write(*,*) "dtnext = ", dtnext
          write(*,*) ""

        write(*,*) "LITE = ", LITE, " day = ", LITE*1440., " min, ",
     :    "LITE12 = ", LITE12, " day = ", LITE12*1440., " min"

        write(*,*) '# lambda = ', lambda/1.d-9, ' nm'
        do k = 1, nbod
          write(*,*) '# Lum_lambda(', k, ') = ', Lum_lambda(k)/Lumtot
        enddo
            write(*,*) 'phi(', k, ') = ', phi, ' rad = ',
     :        phi/pi*180.d0*3600.d0*1d3, ' mas'

      do k = 2, 4
        write(*,*) 'a(', k, ') = ', elmts(k,1), ' AU = ',
     :    elmts(k,1)/(d_pc*pc/AU)/mas, ' mas'
      enddo
      stop


c        tmp = rj(i,1)
c        rj(i,1) = rj(i,2)
c        rj(i,2) = -tmp
c        rj(i,3) = -rj(i,3)
c        tmp = vj(i,1)
c        vj(i,1) = vj(i,2)
c        vj(i,2) = -tmp
c        vj(i,3) = -vj(i,3)
c
c        call orbel_xv2el(
c     :    rj(i,1),rj(i,2),rj(i,3),
c     :    vj(i,1),vj(i,2),vj(i,3),
c     :    msum,ialpha,
c     :    elmts(i,1),elmts(i,2),elmts(i,3),
c     :    elmts(i,4),elmts(i,5),elmts(i,6))
c
c        write(*,*) elmts(i,1), elmts(i,2), elmts(i,3)*rad,
c     :    elmts(i,4)*rad, elmts(i,5)*rad, elmts(i,6)*rad
      write(*,*) "# jacobian"
      do i = 1, nbod
        write(*,*) m(i),(rj(i,k), k=1,3), (vj(i,k), k=1,3)
      enddo

c        write(*,*) A(1), A(2), B(1), B(2), C_(1), C_(2)
c        write(*,*) 'tout(i) = ', tout(i)
c        write(*,*) 'tout(i+1) = ', tout(i+1)
c        write(*,*) 't_ = ', t_
c        write(*,*) 'extra = ', extra

