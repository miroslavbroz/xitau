# chi2.in
# nparam number of parameters
# x() vector
#
#  m1 m2 m3
#  P1 loge1 i1 Omega1 omega1 M1
#  P2 loge2 i2 Omega2 omega2 M2
#  T1 T2 T3
#  logg1 logg2 logg3
#  vrot1 vrot2 vrot3
#  Delta_t1 Delta_t2 Delta_t3
#  metal1 metal2 metal3
#  gamma
#  d_pc
#  pole_l pole_b
#  ...
22

   1.0           1.65207387439123e-07
   88.0          0.205  7.0  0.0  0.0  0.0
   5770.0  300.0
   4.43806762744038  2.97786524703297
   0.0  0.0
   0.0  0.0
   0.0  0.0
   0.0
   10.0
   0.0  0.0

2456224.724705		! fixed (dependent) parameters: T0 [JD]

2			! nbod number of bodies; a list of 2*nbod+4 files with observational data (or '-' if no data)...
-
-
-
-
-
-
-
-

0			! nband number of photometric bands; a list of bands and lightcurve files
-
-
-
-
-
-
-AO1.dat
-Sky_differential.dat
-Sky_angularvelocity.dat

0                       ! geometry of the system: 0 ... hierarchical ((1+2)+3)+4, 1 ... two pairs ((1+2)+(3+4))+5

0.0 0.0		! m_min(nbod) [M_S] minimum masses
3.0 3.0		! m_max(nbod) [M_S] maximum masses
F F		! use_hec88(nbod) use Harmanec (1988) to constrain components (i.e. use only T_eff as a parameter!)

0.001			! lightcurve_timestep [day] timestep of synthetic lightcurve; set to 0.0 if all observed points should be computed
0.100			! approx_eclipse_duration [day] approximate eclipse duration for eclipse detection
0. 10000.e-9		! lambda1 lambda2 [metres] wavelength range for synthetic spectra
0. 10000.e-9		! lambda3 lambda4 [metres] range for absolute spectra (to fit SED)

0.2			! silh_factor [] signal = factor*max(signal) to compute a silhouette

T			! use_planck [T|F] use Planck approximation; otherwise use absolute synthetic spectra (*.abs files)
F			! use_filters [T|F] use filter transmissions to compute SED; otherwise use effective wavelengths and bandpasses
F			! use_limbdark [T|F] use linear limb-darkening coefficients for visibility |V|^2 calculation
F			! use_pyterpol [T|F] use Pyterpol (Nemravova et al. 2016) to generate synthetic spectra on-the-fly
F			! use_vardist [T|F] use variable distance/geometry (in solar system)
F			! use_varpole [T|F] use variable pole of body 1 (in solar system)
F			! use_multipole [T|F] use multipole expansion of body 1
F			! use_bruteforce [T|F] use shape of body 1 and brute-force algorithm
F			! use_ppn [T|F] use parametrized post-Newtonian approximation

1.0 1.0 1.0 1.0  1.0 1.0 1.0  1.0 0.1 1.0  0.3 1.0 1.0	! w_SKY w_RV w_TTV w_ECL w_VIS w_CLO w_T3  w_LC w_SYN w_SED  w_AO w_SKY2 w_SKY3 weights for chi^2 computation
1.e-12			! eps_BS for Bulirsch-Stoer integrator
T			! debugging output?
T			! debug integrator?


