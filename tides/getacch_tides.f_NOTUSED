c getacch_tides.f
c Compute accelerations caused by MUTUAL tides of all massive bodies.
c Miroslav Broz (miroslav.broz@email.cz), Petr Pokorny, Nov 7th 2013

      subroutine getacch_tides(nbod,mass,xh,yh,zh,vxh,vyh,vzh,
     :  axh,ayh,azh)

      include '../swift.inc'
      include '../misc/const.inc'
      include 'tides.inc'
      include 'spin.inc'

c input
      integer nbod
      real*8 mass(NPLMAX)
      real*8 xh(NPLMAX),yh(NPLMAX),zh(NPLMAX)
      real*8 vxh(NPLMAX),vyh(NPLMAX),vzh(NPLMAX)

c input/output
      real*8 axh(NPLMAX),ayh(NPLMAX),azh(NPLMAX)

c temporary
      integer i,j,k,l
      real*8 r(3)
      real*8 v(3)
      real*8 r_dash(3)
      real*8 omega_vec(3)
      real*8 a(3)
      real*8 T(3)
      real*8 a_tides(3,NPLMAX)

      real*8 a_abs, a_tides_abs, T_tides_abs, L_spin_abs, dt  ! dbg

c initialisation
      do i = 1, nbod
        do j = 1, 3
          a_tides(j,i) = 0.d0
          T_tides(j,i) = 0.d0
        enddo
      enddo

c compute tidal accelerations

      do i = 1, nbod  ! "Earth"
        do j = 1, nbod  ! "Moon"

          if (j.ne.i) then

            do k = 1, nbod  ! "test particle"

              if (k.ne.i) then
            
                r(1) = xh(j)-xh(i)  ! "Earth--Moon"
                r(2) = yh(j)-yh(i)
                r(3) = zh(j)-zh(i)
                v(1) = vxh(j)-vxh(i)  ! "Moon" velocity
                v(2) = vyh(j)-vyh(i)
                v(3) = vzh(j)-vzh(i)
                r_dash(1) = xh(k)-xh(i)  ! "Earth--test particle" (we are including cross tides)
                r_dash(2) = yh(k)-yh(i)
                r_dash(3) = zh(k)-zh(i)
                omega_vec(1) = omega(i)*s(1,i)
                omega_vec(2) = omega(i)*s(2,i)
                omega_vec(3) = omega(i)*s(3,i)
              
                call mignard(mass(j), capR(i), k_2(i), Delta_t(i),
     :            r, v, r_dash, omega_vec, a)
            
                call mignard_torque(mass(k), r_dash, a, T)

c                write(*,*) i,j,k,a
c                write(*,*) i,j,k,T

                do l = 1, 3
                  a_tides(l,k) = a_tides(l,k) + a(l)  ! the acceleration is acting on the k-th body
                  T_tides(l,i) = T_tides(l,i) + T(l)  ! while the torque is assigned to the i-th body!
                enddo

              endif

            enddo

          endif

        enddo
      enddo

      if (debug) then
        write(*,*) '# TP_id & acceleration a [AU/day^2]',
     :    ' & a_tides [AU/day^2]',
     :    ' & a_tides/a'

        do i = 1, nbod
          a_abs = sqrt(axh(i)**2+ayh(i)**2+azh(i)**2)
          a_tides_abs = sqrt(a_tides(1,i)**2 + a_tides(2,i)**2
     :      + a_tides(3,i)**2)
          write(*,*) -i, a_abs, a_tides_abs, a_tides_abs/a_abs
        enddo

        dt = 365.25d3
c        write(*,*) '# TP_id',
c     :    ' & torque T [AU^5/day^4]',
c     :    ' & angular momentum L [AU^5/day^3]',
c     :    ' & T*dt/L'
cc        dt = 365.25d9  ! dbg
c        do i = 1, nbod
c          T_tides_abs = sqrt(T_tides(1,i)**2 + T_tides(2,i)**2
c     :      + T_tides(3,i)**2)
c          L_spin_abs = sqrt(L_spin(1,i)**2 + L_spin(2,i)**2
c     :      + L_spin(3,i)**2)
c          write(*,*) -i, T_tides_abs, L_spin_abs,
c     :      T_tides_abs*dt/L_spin_abs
c        enddo

c SI units
c        write(*,*) '# TP_id',
c     :    ' & torque T [kg m^2 s^-2 = N m]',
c     :    ' & angular momentum L [kg m^2 s^-1]'
c        do i = 1, nbod
c          T_tides_abs = sqrt(T_tides(1,i)**2 + T_tides(2,i)**2
c     :      + T_tides(3,i)**2)*AU**5/day**4
c          L_spin_abs = sqrt(L_spin(1,i)**2 + L_spin(2,i)**2
c     :      + L_spin(3,i)**2)*AU**5/day**3
c          write(*,*) -i, T_tides_abs, L_spin_abs
c        enddo

c a different SI conversion
        write(*,*) '# TP_id',
     :    ' & torque T [kg m^2 s^-2 = N m]',
     :    ' & angular momentum L [kg m^2 s^-1]'
        do i = 1, nbod
          T_tides_abs = sqrt(T_tides(1,i)**2 + T_tides(2,i)**2
     :      + T_tides(3,i)**2)
          L_spin_abs = sqrt(L_spin(1,i)**2 + L_spin(2,i)**2
     :      + L_spin(3,i)**2)
c          T_tides_abs = T_tides_abs
c     :      * 1.99d30/0.2959122104742908d-03 * AU
c     :      * 6.67d-11 * 1.99d30/0.2959122104742908d-03
c     :      * AU**5 * day / (AU**5 * AU**5)
c     :      * AU**3 / day
c          L_spin_abs = L_spin_abs
c     :      * AU**5/day**2 / day
c          write(*,'(i8,3(1x,e16.8))') -i, T_tides_abs, L_spin_abs, 
c     :      T_tides_abs*(dt*day)/L_spin_abs
          write(*,'(i8,3(1x,e16.8))') -i, T_tides_abs, L_spin_abs, 
     :      T_tides_abs/L_spin_abs
        enddo

        stop  ! dbg
      endif

c add the result to the HELIOCENTRIC accelerations
      do i = 2, nbod
        axh(i) = axh(i) + a_tides(1,i) - a_tides(1,1)
        ayh(i) = ayh(i) + a_tides(2,i) - a_tides(2,1)
        azh(i) = azh(i) + a_tides(3,i) - a_tides(3,1)
      enddo



      return
      end

c     :      * 6.67d-11 * 1.99d30/0.2959122104742908d-03

